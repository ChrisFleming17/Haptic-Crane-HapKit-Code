//--------------------------------------------------------------------------
// Tania Morimoto and Allison Okamura, Stanford University
// Updated 4.18.16
// Code to test basic Hapkit functionality (sensing and force output)
//--------------------------------------------------------------------------

// Includes
#include <math.h>

// Pin declares
int pwmPin = 5; // PWM output pin for motor 1
int dirPin = 8; // direction output pin for motor 1
int sensorPosPin = A2; // input pin for MR sensor
int fsrPin = A3; // input pin for FSR sensor
int OFFSET = 980;

// Position tracking variables
int updatedPos = 0;     // keeps track of the latest updated value of the MR sensor reading
int rawPos = 0;         // current raw reading from MR sensor
int lastRawPos = 0;     // last raw reading from MR sensor
int lastLastRawPos = 0; // last last raw reading from MR sensor

int flipNumber = 0;     // keeps track of the number of flips over the 180deg mark
int tempOffset = 0;
int rawDiff = 0;
int lastRawDiff = 0;
int rawOffset = 0;
int lastRawOffset = 0;

const int flipThresh = 700;  // threshold to determine whether or not a flip over the 180 degree mark occurred
boolean flipped = false;

//Lab 4 ramp trajectory variables
double m1 = 100; //[kg] mass that the crane is carrying
double m2 = 300; //[kg] mass of the arm of the crane
double l = 20; //[m] length of connection between m1 and m2
double g = 9.86; //[m/s^2]
double xdes = 0;

// Kinematics variables
double xh = 0;           // position of the handle [m]

// Force output variables
double force = 0;           // force at the handle
double Tp = 0;              // torque of the motor pulley
double duty = 0;            // duty cylce (between 0 and 255)
unsigned int output = 0;    // output command to the motor

//Virtual World motion tracking variables in reference frame n
double alpha = 0; //angular acceleration of m2 about its connection to m1
double w = 0; //angular velocity of m2 about its connection to m1
double theta; //angle of m2 relative to n^y

double a = 0; //acceleration of m1
double v = 0; //velocity of m1
double x = 0; //position of m1

double dt = 0.0005;//dt used for integration


// --------------------------------------------------------------
// Setup function -- NO NEED TO EDIT
// --------------------------------------------------------------
void setup() 
{
  // Set up serial communication
  Serial.begin(9600);
  
  // Set PWM frequency 
  setPwmFrequency(pwmPin,1); 
  
  // Input pins
  pinMode(sensorPosPin, INPUT); // set MR sensor pin to be an input
  pinMode(fsrPin, INPUT);       // set FSR sensor pin to be an input

  // Output pins
  pinMode(pwmPin, OUTPUT);  // PWM pin for motor A
  pinMode(dirPin, OUTPUT);  // dir pin for motor A
  
  // Initialize motor 
  analogWrite(pwmPin, 0);     // set to not be spinning (0/255)
  digitalWrite(dirPin, LOW);  // set direction
  
  // Initialize position valiables
  lastLastRawPos = analogRead(sensorPosPin);
  lastRawPos = analogRead(sensorPosPin);
}


// --------------------------------------------------------------
// Main Loop
// --------------------------------------------------------------
void loop()
{
  
  //*************************************************************
  //*** Section 1. Compute position in counts (do not change) ***  
  //*************************************************************

  // Get voltage output by MR sensor
  rawPos = analogRead(sensorPosPin);  //current raw position from MR sensor

  // Calculate differences between subsequent MR sensor readings
  rawDiff = rawPos - lastRawPos;          //difference btwn current raw position and last raw position
  lastRawDiff = rawPos - lastLastRawPos;  //difference btwn current raw position and last last raw position
  rawOffset = abs(rawDiff);
  lastRawOffset = abs(lastRawDiff);
  
  // Update position record-keeping vairables
  lastLastRawPos = lastRawPos;
  lastRawPos = rawPos;
  
  // Keep track of flips over 180 degrees
  if((lastRawOffset > flipThresh) && (!flipped)) { // enter this anytime the last offset is greater than the flip threshold AND it has not just flipped
    if(lastRawDiff > 0) {        // check to see which direction the drive wheel was turning
      flipNumber--;              // cw rotation 
    } else {                     // if(rawDiff < 0)
      flipNumber++;              // ccw rotation
    }
    flipped = true;            // set boolean so that the next time through the loop won't trigger a flip
  } else {                        // anytime no flip has occurred
    flipped = false;
  }
   updatedPos = rawPos + flipNumber*OFFSET; // need to update pos based on what most recent offset is 
 
  //*************************************************************
  //*** Section 2. Compute position in meters *******************
  //*************************************************************

  // ADD YOUR CODE HERE
  // Define kinematic parameters you may need
  double rh = 0.075; //[m] handle radius

  
  // Step 2.1: print updatedPos via serial monitor
  //Serial.println(updatedPos);
  
  
  // Step 2.6: double ts = ?; // Compute the angle of the sector pulley (ts) in degrees based on updatedPos
  double ts = 0.0117*updatedPos + 3.4646; //[degrees] angle measurement of the sector
  
  // Step 2.7: xh = ?;       // Compute the position of the handle (in meters) based on ts (in radians)
  double tsrad = ts*3.1415/180; //[rad] angle measurement of the sector
  double xh = rh*tsrad;
  
  // Step 2.8: print xh via serial monitor
  float loc = 10000*xh;
  int data = (int)loc + 500;
  Serial.write(data);
  //Serial.println(data);
  
  //*************************************************************
  //*** Section 3. Assign a motor output force in Newtons *******  
  //*************************************************************
 
  // ADD YOUR CODE HERE

  

  //Define time and position parameters
  int t1 = 700;
  int t2 = 8000;
  double p1 = 0;
  double p2 = 0.03;
  
  // Define kinematic parameters you may need
  double rs = 0.073152; //[m] sector radius
  double rp = 0.004191; //[m] pulley radius

  //calculate the correct xdes at the right time
//  if(t<t1){
//    xdes = p1;
//  } else if(t>t2){
//    xdes = p2;
//  } else{
//    xdes = p1 + (p2-p1)/(t2-t1)*(t-t1);
//  }


  
  // Step 3.1: force = ?; // In lab 3, you will generate a force by simply assigning this to a constant number (in Newtons)
  double k = 400; //[N/m]
  double b = 50; //[??]

  a = ((m2*l/2)*(sq(w)*sin(theta) - sq(alpha)*cos(theta)) - b*v - k*x)/(m1+m2); //equation of motion (1). Result used to get new alpha

  alpha = -(3/(2*l))*(a*cos(theta) + g*sin(theta)); //equation of motion (2). Result used to get x, theta, and new a
  w = w + alpha*dt;
  theta = theta + w*dt;

  a = ((m2*l/2)*(sq(w)*sin(theta) - sq(alpha)*cos(theta)) - b*v - k*x)/(m1+m2); //equation of motion (1). Result used to get v and x
  v = v + a*dt;
  x = x + v*dt;


  
  double force = k*(xdes-xh);
  //t++;
  //double wall = 0.015; //The location of the wall
  //double adjustment = -0.015; //The adjustment required to start the spring force at x=0
//  if( abs(xh)>wall){
//    if(xh<0){
//      adjustment = 0.015;
//    }
//      //force = -k*(xh+adjustment); //[N]
//  }
//  
  // Step 3.2: Tp = ?;    // Compute the require motor pulley torque (Tp) to generate that force
  double Tp = force*rh*rp/rs;
  
  //*************************************************************
  //*** Section 4. Force output (do not change) *****************
  //*************************************************************
  
  // Determine correct direction for motor torque
  if(force < 0) { 
    digitalWrite(dirPin, HIGH);
  } else {
    digitalWrite(dirPin, LOW);
  }

  // Compute the duty cycle required to generate Tp (torque at the motor pulley)
  duty = sqrt(abs(Tp)/0.0183);

  // Make sure the duty cycle is between 0 and 100%
  if (duty > 1) {            
    duty = 1;
  } else if (duty < 0) { 
    duty = 0;
  }  
  output = (int)(duty* 255);   // convert duty cycle to output signal
  analogWrite(pwmPin,output);  // output the signal
}

// --------------------------------------------------------------
// Function to set PWM Freq -- DO NOT EDIT
// --------------------------------------------------------------
void setPwmFrequency(int pin, int divisor) {
  byte mode;
  if(pin == 5 || pin == 6 || pin == 9 || pin == 10) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 64: mode = 0x03; break;
      case 256: mode = 0x04; break;
      case 1024: mode = 0x05; break;
      default: return;
    }
    if(pin == 5 || pin == 6) {
      TCCR0B = TCCR0B & 0b11111000 | mode;
    } else {
      TCCR1B = TCCR1B & 0b11111000 | mode;
    }
  } else if(pin == 3 || pin == 11) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 32: mode = 0x03; break;
      case 64: mode = 0x04; break;
      case 128: mode = 0x05; break;
      case 256: mode = 0x06; break;
      case 1024: mode = 0x7; break;
      default: return;
    }
    TCCR2B = TCCR2B & 0b11111000 | mode;
  }
}

